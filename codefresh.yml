version: "1.0"
stages:
  - setup
  - build
  - finalise
steps:
  main_clone:
    title: Cloning main repository...
    stage: 'setup'
    type: git-clone
    git: github
    repo: "${{CF_REPO_OWNER}}/${{CF_REPO_NAME}}"
    revision: "${{CF_REVISION}}"

  SetProperties:
      title: Setup build
      stage: 'setup'
      image: alpine/git
      commands:
        - cf_export GPG_IMPORT_COMMAND="cat <(echo -e '${{GPG_PRIVATE_KEY}}') | gpg --batch --import" --mask

  MvnSettings:
    stage: 'setup'
    title: Setup Maven settings
    image: alpine/git
    commands:
      - cf_export MVN_CLI_OPT="-Dmaven.repo.local=\"${{CF_VOLUME_PATH}}/${{CF_REPO_NAME}}_m2/repository\""

  TagReleaseName:
    title: Setup RELEASE_NAME variable with tag
    stage: 'setup'
    image: alpine/git
    when:
      condition:
        all:
          releaseNameNotDefined: "${{TAG_REPO}} == true"
    commands:
      - cf_export RELEASE_NAME=${{TAG_NAME}}

  BranchReleaseName:
    title: Setup RELEASE_NAME variable with branch name
    stage: 'setup'
    image: alpine/git
    when:
      condition:
        all:
          releaseNameNotDefined: "${{TAG_REPO}} == false"
    commands:
      - cf_export RELEASE_NAME=${{GLOBAL_RELEASE_VERSION}}.${{CF_BRANCH_TAG_NORMALIZED}}-SNAPSHOT

  ReleaseProperties:
    title: Setup release build
    stage: 'setup'
    image: alpine/git
    when:
      condition:
        all:
          releaseNameNotDefined: "${{TAG_REPO}} == true"
    commands:
      - cf_export MVN_SET_VERSION="${{MVN_CLI_OPT}} versions:set-property -DnewVersion=${{RELEASE_NAME}}"

  BranchProperties:
    title: Setup branch build
    stage: 'setup'
    image: alpine/git
    when:
      condition:
        all:
          releaseNameNotDefined: "${{TAG_REPO}} == false"
    commands:
      - cf_export MVN_SET_VERSION="${{MVN_CLI_OPT}} versions:update-property -DnewVersion=[${{RELEASE_NAME}}] -DallowSnapshots=true -DallowDowngrade=true"

  BuildTesting:
    title: Maven build rune-testing
    stage: 'build'
    fail_fast: false
    image: maven:3.9.9-eclipse-temurin-21-alpine
    working_directory: ./
    commands:
      - rm -rf /codefresh/volume/.m2/com/regnosys
      - bash -c "${{GPG_IMPORT_COMMAND}}"
      - mvn ${{MVN_CLI_OPT}} versions:set -DnewVersion=${{RELEASE_NAME}}
      - mvn ${{MVN_SET_VERSION}} -Dproperty=rosetta.common.version
      - export CI_DEPLOY_USERNAME="${{CI_DEPLOY_USERNAME}}"
      - export CI_DEPLOY_PASSWORD="${{CI_DEPLOY_PASSWORD}}"
      - export GPG_KEYNAME="${{GPG_KEYNAME}}"
      - export GPG_PASSPHRASE="${{GPG_PASSPHRASE}}"
      - mvn -s settings.xml -U -B ${{MVN_CLI_OPT}} clean install org.sonatype.central:central-publishing-maven-plugin:0.7.0:publish -P release

  FailPipeline:
    title: Fail pipeline if the Maven build failed
    stage: 'finalise'
    image: codefresh/cli
    when:
      steps:
        - name: BuildTesting
          on:
            - failure
    commands:
      - exit 1

  TagRepo:
    title: Tag git repo with release name
    stage: 'finalise'
    image: alpine/git
    when:
      condition:
        all:
          buildTestingPassed: steps.BuildTesting.result == 'success'
          isRelease: "${{TAG_REPO}}"
    commands:
      - echo This is a release build, tag repos with release name [${{RELEASE_NAME}}]
      - git fetch --prune https://${{REGNOSYS_OPS}}:${{REGNOSYS_OPS_TOKEN}}@github.com/finos/${{CF_REPO_NAME}}.git "+refs/tags/*:refs/tags/*"
      - git tag ${{RELEASE_NAME}}
      - git push https://${{REGNOSYS_OPS}}:${{REGNOSYS_OPS_TOKEN}}@github.com/finos/${{CF_REPO_NAME}}.git ${{RELEASE_NAME}}

  StartNextBuild:
    title: Build rosetta-components if on main
    stage: 'finalise'
    image: codefresh/cli
    when:
      branch:
        only:
          - main
      condition:
        all:
          buildPassed: steps.BuildTesting.result == 'success'
          variableDefined: "${{TAG_REPO}} == false"
          skipNextBuild: "${{SKIP_NEXT_BUILD}} == false"
    commands:
      - codefresh run REGnosys/rosetta-components/rosetta-components --branch main --detach